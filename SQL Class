
 # Write a query to return the names of the top 5 cities with the most rental revenues in 2020.
 # Include each city's revenue in the second column.
 # The order of your results doesn't matter.
 # YourÂ results should have exactly 5 rows.

SELECT C.city, SUM(amount)
FROM address A
INNER JOIN city C
ON A.city_id = C.city_id
INNER JOIN customer CS
ON A.address_id = CS.address_id
INNER JOIN payment P
ON CS.customer_id = P.customer_id
GROUP BY C.city
ORDER BY SUM(amount) DESC
LIMIT 5;

# Write a query to return the name of the 3 movie categories that generated the most rental revenue
# And rental revenue from each of the category.
# The order of your results doesn't matter.
# If there are ties, return just one of them.

SELECT C.name, SUM(P.amount)
FROM payment P
INNER JOIN rental R 
ON R.rental_id = P.rental_id
INNER JOIN inventory I
ON I.inventory_id = R.inventory_id
INNER JOIN film F
ON F.film_id = I.film_id
INNER JOIN film_category FC
ON FC.film_id = F.film_id
INNER JOIN category C
ON C.category_id = FC.category_id
GROUP BY C.name 
ORDER BY SUM(P.amount) DESC
LIMIT 3;


# Write a query to return the first name and last name of actors who only appeared in movies.
# Actor appeared in tv should not be included .
# The order of your results doesn't matter.

SELECT first_name, last_name
FROM actor_movie
WHERE actor_id NOT IN (SELECT actor_id FROM actor_tv)


# Write a query to return the number of customers in 3 separate groups: high, medium, low.
# The order of your results doesn't matter.

# Definition
# high: movie rental spend >= $150.
# medium: movie rental spend >= $100, <$150.
# low: movie rental spend <$100.

SELECT customer_group, COUNT(*)
FROM (
SELECT c.customer_id,
		CASE
			WHEN SUM(p.amount) >= 150 THEN 'high'
			WHEN SUM(p.amount) >= 100 THEN 'medium'
			ELSE 'low'
			END customer_group
FROM customer c
LEFT JOIN payment p
ON c.customer_id = p.customer_id
GROUP BY c.customer_id
) X
GROUP BY customer_group











