## 1
--Return title of film with 2nd largets cast
--JOIN film with film_actor ON film_id
--COLUMNS title, film_id
-- Count(film_id)
--Create ROW_NUMBER() OVER(ORDER BY Count DESC)
--Filer on ROW = 2

WITH second_larg_film AS (
SELECT 
	title,
	COUNT(fa.film_id) film_cnt
FROM film
INNER JOIN film_actor fa
ON fa.film_id = film.film_id
GROUP BY title
)
SELECT 
	title
FROM (
SELECT
	title,
	ROW_NUMBER() OVER(ORDER BY film_cnt DESC) as film_cnt_idx
FROM second_larg_film ) X
WHERE film_cnt_idx = 2;

## 2
--Return the most actors
--if there are ties return 1
--JOIN film with film_actor ON film_id
--COLUMNS title, actor_id
--Count(actor_id)
--Create ROW_NUMBER() OVER(ORDER BY Count DESC)
--Filter on ROW = 1

WITH max_film AS (
SELECT 
	title,
	COUNT(actor_id) as actors
FROM film 
INNER JOIN film_actor fa
ON film.film_id = fa.film_id
GROUP BY title )
SELECT
	title
FROM (
SELECT
	title,
	ROW_NUMBER() OVER(ORDER BY actors DESC) actor_idx
FROM max_film ) x
WHERE actor_idx = 1;

## 3
--Return the title of the 2nd shortest film based on duration/length
--if here are ties return only 1
--COLUMNS title, length
--Create ROW_NUMBER() OVER(ORDER BY length ASC)
-- Filter by ROW = 2

WITH sec_short_film AS (
SELECT 
	title,
	length
FROM film
)
SELECT 
	title
FROM (
SELECT 
	title,
	ROW_NUMBER() OVER(ORDER BY length) as length_idx
FROM sec_short_film
) X
WHERE length_idx = 2;

## 4
--Write query to return total number cstomer who DID NOT rent movies in May 2020
--Columns customer_id, rental ts from rental
--COUNT(*) customer who are NOT IN May

SELECT COUNT(*) 
FROM customer
WHERE customer_id NOT IN(
	SELECT customer_id
	FROM rental
	WHERE  DATE(rental_ts) >= '2020-05-01'
	AND    DATE(rental_ts) <= '2020-05-31'
);

## 5 
--Write a query to return first and last name of customer who made the most
--rental tracactions in May 2020
--COLUMNS first_name, last_name from customer and rental_id, rental_ts from rental
--JOIN customer and rental on customer_id = rental_id
--Filer on total rental DESC
--Filter by rental_ts on May 2020
--Order by total rentals DESC
--Limit 1;



WITH most_rent_trans AS (
SELECT 
	last_name,
	first_name,
	COUNT(*) AS total_rentals
FROM rental r
JOIN customer c
ON c.customer_id = r.customer_id
WHERE rental_ts >= '2020-05-01'
AND rental_ts <= '2020-05-31'
GROUP BY first_name, last_name
ORDER BY COUNT(*) DESC
)
SELECT 
	first_name,
	last_name
FROM most_rent_trans
LIMIT 1;

## 6
--Write query to retrun name of customer who spent 2nd highest 
--For movie rental in May 2020
--COLUMNS fist_name, last name from customer - SUM(amount) from payment
--JOIN customer and payment ON customer_id
--Filter on payment_ts for Month of May
--Group by first_name, last_name
--Create Rank ORDER BY amount DESC
--Filter where Rank = 2

WITH cust_spend_may AS (
    SELECT 
  	c.first_name,
  	c.last_name,
	SUM(amount) AS cust_spend
    FROM payment
	INNER JOIN customer c
	ON payment.customer_id = c.customer_id
    WHERE payment_ts >= '2020-05-01'
    AND payment_ts < '2020-06-01'
    GROUP BY c.first_name, c.last_name
)
SELECT 
	first_name,
	last_name
FROM (
SELECT
	first_name,
	last_name,
	RANK() OVER(ORDER BY cust_spend DESC) as cust_spend_idx
FROM cust_spend_may
) X
WHERE cust_spend_idx = 2;

## 7
--Write query to return total number cstomer who DID NOT rent movies in May 2020
--COUNT(*) from customer table
--Filter NOT IN 
--SELECT customer_id from rental
--Filter on Month of May

SELECT COUNT(*) 
FROM customer
WHERE customer_id NOT IN(
	SELECT customer_id
	FROM rental
	WHERE  DATE(rental_ts) >= '2020-05-01'
	AND    DATE(rental_ts) <= '2020-05-31'
);
